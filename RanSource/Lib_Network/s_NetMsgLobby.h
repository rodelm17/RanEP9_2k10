/*!
 * \file s_NetMsgLobby.h
 *
 * \author Juver
 * \date 2020/11/05
 *
 * 
 */

#ifndef S_NETMSGLOBBY_H_INCLUDED__
#define S_NETMSGLOBBY_H_INCLUDED__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "./s_NetGlobal.h"
#include "./s_NetMsgDefine.h"
#include "./s_NetMsgEnum.h"

/*register page, Juver, 2017/11/18 */
struct NET_REGISTER_INIT
{
	NET_MSG_GENERIC nmg;
	int		nChannel;
	bool	bInit;

	NET_REGISTER_INIT() 
		: bInit( false )
		, nChannel(0)
	{
		nmg.dwSize  = sizeof(NET_REGISTER_INIT);
		nmg.nType  = NET_MSG_REGISTER_INIT;
	}
};
typedef NET_REGISTER_INIT* LPNET_REGISTER_INIT;

/*register page, Juver, 2017/11/18 */
struct NET_REGISTER_ACTION
{
	NET_MSG_GENERIC nmg;
	int		nChannel;
	TCHAR	szUser[USR_ID_LENGTH];
	TCHAR	szPass[USR_PASS_LENGTH];
	TCHAR	szPass2[USR_PASS_LENGTH];
	TCHAR	szSA[USR_PASS_LENGTH];
	TCHAR	szMail[USR_INFOMAIL_LENGTH];
	TCHAR	szFullName[USR_INFOFULLNAME_LENGTH];

	DWORD	dwReferralUserNum;

	//PCID
	TCHAR	szPCID_HWID[PCID_LENGTH];
	TCHAR	szPCID_MAC[PCID_LENGTH];

	NET_REGISTER_ACTION() 
		: nChannel(0)
		, dwReferralUserNum(0)
	{
		nmg.dwSize  = sizeof(NET_REGISTER_ACTION);
		nmg.nType  = NET_MSG_REGISTER_ACTION;

		SecureZeroMemory( szUser, sizeof(TCHAR) * USR_ID_LENGTH );
		SecureZeroMemory( szPass, sizeof(TCHAR) * USR_PASS_LENGTH );
		SecureZeroMemory( szPass2, sizeof(TCHAR) * USR_PASS_LENGTH );
		SecureZeroMemory( szSA, sizeof(TCHAR) * USR_PASS_LENGTH );
		SecureZeroMemory( szMail, sizeof(TCHAR) * USR_INFOMAIL_LENGTH );
		SecureZeroMemory( szFullName, sizeof(TCHAR) * USR_INFOFULLNAME_LENGTH );

		//PCID
		SecureZeroMemory( szPCID_HWID, sizeof(TCHAR) * (PCID_LENGTH) );
		SecureZeroMemory( szPCID_MAC, sizeof(TCHAR) * (PCID_LENGTH) );

		BOOST_STATIC_ASSERT(sizeof(NET_REGISTER_ACTION)<=NET_DATA_BUFSIZE);
	}
};

struct NET_REGISTER_ACTION_FB
{
	NET_MSG_GENERIC nmg;
	EMREGISTER_FB	emFB;
	int				nERRORVAR;

	NET_REGISTER_ACTION_FB() 
		: nERRORVAR(0)
		, emFB(EMREGISTER_FB_ERROR_SERVER)
	{
		nmg.dwSize = sizeof(NET_REGISTER_ACTION_FB);
		nmg.nType  = NET_MSG_REGISTER_ACTION_FB;
	}
};
typedef NET_REGISTER_ACTION_FB* LPNET_REGISTER_ACTION_FB;

struct NET_REGISTER_ACTION_FB2
{
	NET_MSG_GENERIC nmg;
	EMREGISTER_FB2	emFB;
	TCHAR			szUserid[USR_ID_LENGTH+1];
	CHAR			szIp[MAX_IP_LENGTH+1];
	INT				nClient;

	//PCID
	TCHAR			szPCID_HWID[PCID_LENGTH];
	TCHAR			szPCID_MAC[PCID_LENGTH];

	NET_REGISTER_ACTION_FB2() 
		: emFB(EMREGISTER_FB2_OK)
		, nClient(0)
	{
		SecureZeroMemory( szUserid, sizeof(TCHAR) * USR_ID_LENGTH+1 );
		SecureZeroMemory( szIp, sizeof(TCHAR) * MAX_IP_LENGTH+1 );
		nmg.dwSize = sizeof(NET_REGISTER_ACTION_FB2);
		nmg.nType  = NET_MSG_REGISTER_ACTION_FB2;

		//PCID
		SecureZeroMemory( szPCID_HWID, sizeof(TCHAR) * (PCID_LENGTH) );
		SecureZeroMemory( szPCID_MAC, sizeof(TCHAR) * (PCID_LENGTH) );

		BOOST_STATIC_ASSERT(sizeof(NET_REGISTER_ACTION_FB2)<=NET_DATA_BUFSIZE);
	}
};
typedef NET_REGISTER_ACTION_FB2* LPNET_REGISTER_ACTION_FB2;


/* user account page, Juver, 2020/11/05 */
struct NET_USER_ACCOUNT_PAGE_INIT
{
	NET_MSG_GENERIC nmg;
	int		nChannel;
	bool	bInit;

	NET_USER_ACCOUNT_PAGE_INIT() 
		: bInit( false )
		, nChannel(0)
	{
		nmg.dwSize  = sizeof(NET_USER_ACCOUNT_PAGE_INIT);
		nmg.nType  = NET_MSG_USER_ACCOUNT_PAGE_INIT;
	}
};
typedef NET_USER_ACCOUNT_PAGE_INIT* LPNET_USER_ACCOUNT_PAGE_INIT;


/* login device check, Juver, 2020/11/06 */
struct NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET
{
	NET_MSG_GENERIC		nmg;
	bool				bSet;
	char				szPassword[USR_PASS_LENGTH+1];

	NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET()
		: bSet(false)
	{	
		memset(szPassword, 0, sizeof(char) * (USR_PASS_LENGTH+1));

		nmg.dwSize = sizeof(NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET);
		nmg.nType  = NET_MSG_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET;
	}
};
typedef NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET* LPNET_NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET;

/* login device check, Juver, 2020/11/06 */
struct NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB
{
	NET_MSG_GENERIC nmg;
	EMUSER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB	emFB;
	bool			bUserLoginDeviceCheck;

	NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB() 
		: emFB(EMUSER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB_ERROR_SERVER)
		, bUserLoginDeviceCheck(false)
	{
		nmg.dwSize = sizeof(NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB);
		nmg.nType  = NET_MSG_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB;
	}
};
typedef NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB* LPNET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB;

/* login device check, Juver, 2020/11/07 */
struct NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB2
{
	NET_MSG_GENERIC nmg;
	EMUSER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB2	emFB;

	DWORD			dwUserNum;
	TCHAR			szUserid[USR_ID_LENGTH+1];
	CHAR			szIp[MAX_IP_LENGTH+1];
	DWORD			dwClient;

	bool			bUserLoginDeviceCheck;			


	NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB2() 
		: emFB(EMUSER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB_ERROR)
		, dwUserNum(0)
		, dwClient(0)
		, bUserLoginDeviceCheck(false)
	{
		SecureZeroMemory( szUserid, sizeof(TCHAR) * USR_ID_LENGTH+1 );
		SecureZeroMemory( szIp, sizeof(TCHAR) * MAX_IP_LENGTH+1 );

		nmg.dwSize = sizeof(NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB2);
		nmg.nType  = NET_MSG_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB2;

		BOOST_STATIC_ASSERT(sizeof(NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB2)<=NET_DATA_BUFSIZE);
	}
};
typedef NET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB2* LPNET_USER_ACCOUNT_PAGE_LOGIN_DEVICE_CHECK_SET_FB2;


/* login device check, Juver, 2020/11/07 */
struct NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_INIT
{
	NET_MSG_GENERIC nmg;
	int		nChannel;
	bool	bInit;

	NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_INIT() 
		: bInit( false )
		, nChannel(0)
	{
		nmg.dwSize  = sizeof(NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_INIT);
		nmg.nType  = NET_MSG_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_INIT;
	}
};
typedef NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_INIT* LPNET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_INIT;


/* login device check, Juver, 2020/11/07 */
struct NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION
{
	NET_MSG_GENERIC nmg;
	int		nChannel;
	TCHAR	szUser[USR_ID_LENGTH];
	TCHAR	szPass[USR_PASS_LENGTH];

	//PCID
	TCHAR	szPCID_HWID[PCID_LENGTH];
	TCHAR	szPCID_MAC[PCID_LENGTH];

	NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION() 
		: nChannel(0)
	{
		nmg.dwSize  = sizeof(NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION);
		nmg.nType  = NET_MSG_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION;

		SecureZeroMemory( szUser, sizeof(TCHAR) * USR_ID_LENGTH );
		SecureZeroMemory( szPass, sizeof(TCHAR) * USR_PASS_LENGTH );

		//PCID
		SecureZeroMemory( szPCID_HWID, sizeof(TCHAR) * (PCID_LENGTH) );
		SecureZeroMemory( szPCID_MAC, sizeof(TCHAR) * (PCID_LENGTH) );

		BOOST_STATIC_ASSERT(sizeof(NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION)<=NET_DATA_BUFSIZE);
	}
};
typedef NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION* LPNET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION;

/* login device check, Juver, 2020/11/07 */
struct NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB
{
	NET_MSG_GENERIC nmg;
	EMUSER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB	emFB;

	NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB() 
		: emFB(EMUSER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB_ERROR_SERVER)
	{
		nmg.dwSize = sizeof(NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB);
		nmg.nType  = NET_MSG_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB;
	}
};
typedef NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB* LPNET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB;

/* login device check, Juver, 2020/11/07 */
struct NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB2
{
	NET_MSG_GENERIC		nmg;
	EMUSER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB2	emFB;
	TCHAR				szUserid[USR_ID_LENGTH+1];
	CHAR				szIp[MAX_IP_LENGTH+1];
	INT					nClient;

	//PCID
	TCHAR			szPCID_HWID[PCID_LENGTH];
	TCHAR			szPCID_MAC[PCID_LENGTH];

	NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB2() 
		: emFB(EMUSER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB2_ERROR)
		, nClient(0)
	{
		SecureZeroMemory( szUserid, sizeof(TCHAR) * USR_ID_LENGTH+1 );
		SecureZeroMemory( szIp, sizeof(TCHAR) * MAX_IP_LENGTH+1 );

		//PCID
		SecureZeroMemory( szPCID_HWID, sizeof(TCHAR) * (PCID_LENGTH) );
		SecureZeroMemory( szPCID_MAC, sizeof(TCHAR) * (PCID_LENGTH) );

		nmg.dwSize = sizeof(NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB2);
		nmg.nType  = NET_MSG_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB2;

		BOOST_STATIC_ASSERT(sizeof(NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB2)<=NET_DATA_BUFSIZE);
	}
};
typedef NET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB2* LPNET_USER_LOGIN_DEVICE_CHECK_VERIFY_REQUEST_ACTION_FB2;



#endif // S_NETMSGLOBBY_H_INCLUDED__
