#include "stdafx.h"
#include "./MemoryXFile.h"
#include "./DebugSet.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

TBYTE CMemoryXFile::m_skin_file_xor_key_v2[XOR_KEY_SIZE] = 
{ 
	0x00, 0xF0, 0xF4, 0xDB, 0xA9, 0x9A, 0xFF, 0xCA, 0xBB, 0x77, 0x3B, 0x1A, 0xEA, 0x22, 0x4B, 0xDC,	
	0x12, 0xC9, 0xE8, 0xA6, 0x1D, 0x1E, 0xB0, 0x76, 0xC5, 0x0F, 0x25, 0x71, 0x83, 0x82, 0x53, 0x26, 
	0xC0, 0x9B, 0xB7, 0xAD, 0xE7, 0x91, 0x46, 0x95, 0x5B, 0x24, 0x23, 0xB6, 0xEF, 0x2C, 0x2D, 0xB5, 
	0x2E, 0x67, 0x99, 0x50, 0xA3, 0x94, 0xD6, 0xD4, 0x29, 0x68, 0xD5, 0xC8, 0x4A, 0xBE, 0x40, 0x42, 
	0x89, 0x49, 0x18, 0xA0, 0x6E, 0x8E, 0xF2, 0x9C, 0xC6, 0x21, 0xAE, 0x08, 0x02, 0xFE, 0x43, 0xD7, 
	0xE3, 0x98, 0x3E, 0xFC, 0x2B, 0x60, 0x28, 0x7B, 0x30, 0x01, 0x09, 0x3F, 0xB1, 0x3A, 0xDF, 0x70, 
	0xF6, 0x6C, 0x74, 0x72, 0xED, 0x88, 0x14, 0x6A, 0x20, 0x84, 0xF9, 0x5C, 0x0C, 0xA1, 0x5E, 0x11, 
	0x19, 0x03, 0xD0, 0xF8, 0x81, 0x0B, 0xD8, 0x87, 0x73, 0xA5, 0xA8, 0x9E, 0x3D, 0x44, 0x6B, 0xEB, 
	0x55, 0x37, 0xD2, 0x06, 0xB2, 0xDD, 0xB3, 0xB4, 0xAA, 0x17, 0x7D, 0x39, 0xA2, 0xE2, 0xE1, 0xCE, 
	0x41, 0x07, 0xBC, 0x66, 0x62, 0xB9, 0x8F, 0xC3, 0xEE, 0x36, 0x78, 0xC4, 0x1B, 0xCB, 0xFA, 0xAB, 
	0x32, 0x8D, 0x0D, 0x69, 0xDE, 0x4C, 0xC1, 0x7C, 0xDA, 0xE6, 0xD1, 0xC7, 0x56, 0xA4, 0x86, 0x1C,
	0x7E, 0x1F, 0x48, 0x35, 0x15, 0xE0, 0x9F, 0x52, 0x8A, 0x63, 0x5D, 0x93, 0x05, 0xEC, 0xAC, 0xA7, 
	0xFB, 0xBA, 0x45, 0x6F, 0xF1, 0x0E, 0xE4, 0x8B, 0x5A, 0x7F, 0x97, 0x65, 0x90, 0x92, 0x9D, 0x75,
	0xE5, 0x0A, 0xF3, 0x80, 0x31, 0x04, 0x38, 0x27, 0x54, 0x5F, 0x79, 0x6D, 0x64, 0x2A, 0x33, 0x57, 
	0x85, 0xE9, 0xF5, 0xCF, 0xAF, 0x2F, 0x58, 0x10, 0xD3, 0xBD, 0x4F, 0xB8, 0xFD, 0xD9, 0x61, 0x13,
	0xCD, 0x3C, 0x8C, 0x4E, 0x4D, 0x51, 0x47, 0x96, 0x16, 0xC2, 0xCC, 0xF7, 0xBF, 0x34, 0x59, 0x7A, 
};

TBYTE CMemoryXFile::m_skin_file_xor_key_v3[XOR_KEY_SIZE] = 
{ 

#ifdef BUILD_CH
	0x00, 0xF0, 0xF4, 0xDB, 0xBF, 0x34, 0x59, 0x7A, 0x3D, 0x44, 0x6B, 0xEB, 0xB2, 0xDD, 0xB3, 0xB4, 
	0xA9, 0x9A, 0xFF, 0xCA, 0x5A, 0x7F, 0x97, 0x65, 0xB1, 0x3A, 0xDF, 0x70, 0x1B, 0xCB, 0xFA, 0xAB, 
	0xBB, 0x77, 0x3B, 0x1A, 0x16, 0xC2, 0xCC, 0xF7, 0x73, 0xA5, 0xA8, 0x9E, 0x55, 0x37, 0xD2, 0x06, 
	0xEA, 0x22, 0x4B, 0xDC,	0xF1, 0x0E, 0xE4, 0x8B, 0x6E, 0x8E, 0xF2, 0x9C, 0xDA, 0xE6, 0xD1, 0xC7, 
	0x12, 0xC9, 0xE8, 0xA6, 0x4D, 0x51, 0x47, 0x96, 0x81, 0x0B, 0xD8, 0x87, 0x41, 0x07, 0xBC, 0x66, 
	0x1D, 0x1E, 0xB0, 0x76, 0xFB, 0xBA, 0x45, 0x6F, 0x4A, 0xBE, 0x40, 0x42, 0x56, 0xA4, 0x86, 0x1C,
	0xC5, 0x0F, 0x25, 0x71, 0xCD, 0x3C, 0x8C, 0x4E, 0x19, 0x03, 0xD0, 0xF8, 0xAA, 0x17, 0x7D, 0x39, 
	0x83, 0x82, 0x53, 0x26, 0x05, 0xEC, 0xAC, 0xA7, 0x02, 0xFE, 0x43, 0xD7, 0xDE, 0x4C, 0xC1, 0x7C, 
	0xC0, 0x9B, 0xB7, 0xAD, 0xFD, 0xD9, 0x61, 0x13, 0x0C, 0xA1, 0x5E, 0x11, 0x62, 0xB9, 0x8F, 0xC3, 
	0xE7, 0x91, 0x46, 0x95, 0x8A, 0x63, 0x5D, 0x93, 0xE3, 0x98, 0x3E, 0xFC, 0x31, 0x04, 0x38, 0x27, 
	0x5B, 0x24, 0x23, 0xB6, 0xD3, 0xBD, 0x4F, 0xB8, 0x20, 0x84, 0xF9, 0x5C, 0xA2, 0xE2, 0xE1, 0xCE, 
	0xEF, 0x2C, 0x2D, 0xB5, 0x15, 0xE0, 0x9F, 0x52, 0x2B, 0x60, 0x28, 0x7B, 0x32, 0x8D, 0x0D, 0x69, 
	0x2E, 0x67, 0x99, 0x50, 0xAF, 0x2F, 0x58, 0x10, 0xED, 0x88, 0x14, 0x6A, 0xEE, 0x36, 0x78, 0xC4, 
	0xA3, 0x94, 0xD6, 0xD4, 0x7E, 0x1F, 0x48, 0x35, 0x30, 0x01, 0x09, 0x3F, 0xE5, 0x0A, 0xF3, 0x80, 
	0x29, 0x68, 0xD5, 0xC8, 0x85, 0xE9, 0xF5, 0xCF, 0xF6, 0x6C, 0x74, 0x72, 0x90, 0x92, 0x9D, 0x75,
	0x89, 0x49, 0x18, 0xA0, 0x64, 0x2A, 0x33, 0x57, 0xC6, 0x21, 0xAE, 0x08, 0x54, 0x5F, 0x79, 0x6D,
#else	
	0x00, 0xF0, 0xF4, 0xDB, 0xBF, 0x34, 0x59, 0x7A, 0x73, 0xA5, 0xA8, 0x9E, 0x55, 0x37, 0xD2, 0x06,
	0xA9, 0x9A, 0xFF, 0xCA, 0x5A, 0x7F, 0x97, 0x65, 0x3D, 0x44, 0x6B, 0xEB, 0xB2, 0xDD, 0xB3, 0xB4, 
	0xBB, 0x77, 0x3B, 0x1A, 0x16, 0xC2, 0xCC, 0xF7, 0x2B, 0x60, 0x28, 0x7B, 0x32, 0x8D, 0x0D, 0x69, 
	0xEA, 0x22, 0x4B, 0xDC,	0xF1, 0x0E, 0xE4, 0x8B, 0x81, 0x0B, 0xD8, 0x87, 0x41, 0x07, 0xBC, 0x66, 
	0x12, 0xC9, 0xE8, 0xA6, 0x4D, 0x51, 0x47, 0x96, 0x19, 0x03, 0xD0, 0xF8, 0xAA, 0x17, 0x7D, 0x39, 
	0x1D, 0x1E, 0xB0, 0x76, 0xFB, 0xBA, 0x45, 0x6F, 0x30, 0x01, 0x09, 0x3F, 0xE5, 0x0A, 0xF3, 0x80, 
	0xC5, 0x0F, 0x25, 0x71, 0xCD, 0x3C, 0x8C, 0x4E, 0xC6, 0x21, 0xAE, 0x08, 0x54, 0x5F, 0x79, 0x6D,
	0x83, 0x82, 0x53, 0x26, 0x05, 0xEC, 0xAC, 0xA7, 0xF6, 0x6C, 0x74, 0x72, 0x90, 0x92, 0x9D, 0x75,
	0xC0, 0x9B, 0xB7, 0xAD, 0xFD, 0xD9, 0x61, 0x13, 0xED, 0x88, 0x14, 0x6A, 0xEE, 0x36, 0x78, 0xC4, 
	0xE7, 0x91, 0x46, 0x95, 0x8A, 0x63, 0x5D, 0x93, 0xB1, 0x3A, 0xDF, 0x70, 0x1B, 0xCB, 0xFA, 0xAB, 
	0x5B, 0x24, 0x23, 0xB6, 0xD3, 0xBD, 0x4F, 0xB8, 0x6E, 0x8E, 0xF2, 0x9C, 0xDA, 0xE6, 0xD1, 0xC7, 
	0xEF, 0x2C, 0x2D, 0xB5, 0x15, 0xE0, 0x9F, 0x52, 0x0C, 0xA1, 0x5E, 0x11, 0x62, 0xB9, 0x8F, 0xC3, 
	0x2E, 0x67, 0x99, 0x50, 0xAF, 0x2F, 0x58, 0x10, 0x20, 0x84, 0xF9, 0x5C, 0xA2, 0xE2, 0xE1, 0xCE, 
	0xA3, 0x94, 0xD6, 0xD4, 0x7E, 0x1F, 0x48, 0x35, 0x02, 0xFE, 0x43, 0xD7, 0xDE, 0x4C, 0xC1, 0x7C, 
	0x29, 0x68, 0xD5, 0xC8, 0x85, 0xE9, 0xF5, 0xCF, 0xE3, 0x98, 0x3E, 0xFC, 0x31, 0x04, 0x38, 0x27, 
	0x4A, 0xBE, 0x40, 0x42, 0x56, 0xA4, 0x86, 0x1C, 0x89, 0x49, 0x18, 0xA0, 0x64, 0x2A, 0x33, 0x57, 
#endif // BUILD_CH	
	
};

CMemoryXFile::CMemoryXFile()
{
	m_Buffer = NULL;
	m_nSize = 0;
}

CMemoryXFile::~CMemoryXFile()
{
	if (m_Buffer)	SAFE_DELETE_ARRAY( m_Buffer );
}

bool CMemoryXFile::LoadFileDec( const char* szFileName )
{
	FILE* pFile = NULL;
	pFile = fopen( szFileName, "rb" );
	if ( !pFile )
	{
		CDebugSet::ToLogFile( "Skin File Open Error", szFileName );	
		return false;
	}

	if ( !DecryptSkin( pFile ) )
	{
		fclose ( pFile );
		CDebugSet::ToLogFile( "Skin File Decrypt Error", szFileName );	
		return false;
	}

	fclose ( pFile );
	
	return true;
}

bool CMemoryXFile::SaveFileEnc( const char* szFileName )
{
	FILE* pFile = NULL;
	pFile = fopen( szFileName, "rb" );
	if ( !pFile )
	{
		CDebugSet::ToLogFile( "Skin File Open Error", szFileName );	
		return false;
	}

	if ( !EncryptSkin( pFile, szFileName ) )
	{
		fclose ( pFile );
		CDebugSet::ToLogFile( "Skin File Decrypt Error", szFileName );	
		return false;
	}

	fclose ( pFile );
	
	return true;
}

bool CMemoryXFile::DecryptSkin( FILE* pFile )
{
	fseek ( pFile, 0, SEEK_END );
	int nSize = ftell ( pFile );

	fseek ( pFile, 0, SEEK_SET );	
	
	int nVersion = 0;
	int nReadSize = 0;
	int nFileType = 0;
	
	fread( &nVersion, sizeof(int), 1, pFile );
    fread( &nReadSize, sizeof(int), 1, pFile );
	fread( &nFileType, sizeof(int), 1, pFile );

	if ( nVersion > SKIN_VERSION || nSize != nReadSize + SKIN_HEADER_SIZE )
	{
		return false;
	}	
	
	m_nSize = nReadSize;
	
	m_Buffer = new BYTE[nReadSize];
	fread( m_Buffer, sizeof(BYTE), nReadSize, pFile );
	

	if ( nVersion == SKIN_VERSION )
	{
		for ( int i = 0; i < nReadSize; ++i )
		{
			m_Buffer[i] = m_Buffer[i] - 0xFF;
			m_Buffer[i] = m_Buffer[i] ^ (m_skin_file_xor_key_v3[i % XOR_KEY_SIZE]);
		}
	}
	else if ( nVersion == 0x200 )
	{
		for ( int i = 0; i < nReadSize; ++i )
		{
			m_Buffer[i] = m_Buffer[i] - 0xFF;
			m_Buffer[i] = m_Buffer[i] ^ (m_skin_file_xor_key_v2[i % XOR_KEY_SIZE]);
		}
	}
	else if ( nVersion == 0x0100 )
	{
		for ( int i = 0; i < nReadSize; ++i )
		{
			m_Buffer[i] += SKIN_DIFF_DATA;
			m_Buffer[i] = m_Buffer[i] ^ SKIN_XOR_DATA;
		}
	}

	

	return true;
}

bool CMemoryXFile::EncryptSkin( FILE* pFile, const char* szFileName )
{
	fseek ( pFile, 0, SEEK_END );
	int nSize = ftell ( pFile );

	fseek ( pFile, 0, SEEK_SET );	
	
	BYTE* pBuffer = new BYTE[SKIN_HEADER_SIZE+nSize];

	int nVersion = SKIN_VERSION;
	int nFileType = 0;

	CString strFileExt = szFileName;

	strFileExt = strFileExt.Right( strFileExt.GetLength() - strFileExt.ReverseFind( '.' ) );
	strFileExt.MakeLower();

	memcpy( pBuffer, &nVersion, sizeof( int ) );
	memcpy( pBuffer+4, &nSize, sizeof(int) );
	memcpy( pBuffer+8, &nFileType, sizeof(int) );	
	
	fread( pBuffer+SKIN_HEADER_SIZE, sizeof(BYTE), nSize, pFile );
	fclose( pFile );

	//DeleteFile( szFileName );

	for ( int i = 0; i < nSize; ++i )
	{
		//pBuffer[SKIN_HEADER_SIZE+i] = pBuffer[SKIN_HEADER_SIZE+i] ^ SKIN_XOR_DATA;
		//pBuffer[SKIN_HEADER_SIZE+i] -= SKIN_DIFF_DATA;

		pBuffer[SKIN_HEADER_SIZE+i] = pBuffer[SKIN_HEADER_SIZE+i] ^ (m_skin_file_xor_key_v3[i % XOR_KEY_SIZE]);
		pBuffer[SKIN_HEADER_SIZE+i] = pBuffer[SKIN_HEADER_SIZE+i] + 0xFF;
	}

	CString strOutFile = szFileName;
	strOutFile = strOutFile.Left( strOutFile.ReverseFind('.'));
	strOutFile += ".mxf";

	FILE* pFileOutput = NULL;
	pFileOutput = fopen( strOutFile, "wb" );
	if ( !pFileOutput )
	{
		delete[] pBuffer;
		return FALSE;
	}
	
	fwrite( pBuffer, sizeof(BYTE), nSize+SKIN_HEADER_SIZE, pFileOutput );
	fclose( pFileOutput );

	delete[] pBuffer;
	return TRUE;
}

bool CMemoryXFile::DecryptSkinToTile( FILE* pFile, const char* szFileName )
{
	if ( !pFile )	return FALSE;

	bool bDEC = DecryptSkin( pFile );

	if ( !bDEC )	return FALSE;
	fclose( pFile );

	//DeleteFile( szFileName );

	CString strOutFile = szFileName;
	strOutFile = strOutFile.Left( strOutFile.ReverseFind( '.' ) );
	strOutFile += ".x";

	FILE* pFileOutput = NULL;
	pFileOutput = fopen( strOutFile, "wb" );
	if ( !pFileOutput )	return FALSE;

	fwrite( GetData(), sizeof(BYTE), GetSize(), pFileOutput );
	fclose( pFileOutput );

	return true;
}